name: 'Terraform - PRODUCTION - Deploy'

on:
  push:
    branches:
    - production

permissions:
  pull-requests: write
  
jobs:
  prod-deploy:
    name: 'Terraform - PRODUCTION - Deploy'
    runs-on: arc-runner-set-tfm-s3-website
    environment: production
    env: 
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      ENVIRONMENT: production
      TF_WORKSPACE: production
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    # AWS CLI is not installed by defualt on self-hosted runner image
    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2 
    
    # Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.2.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: terraform fmt
      uses: dflook/terraform-fmt-check@v2
      id: fmt-check
      with:
        workspace: ${{ env.TF_WORKSPACE }}
    
    - name: Wrong formatting found
      if: ${{ failure() && steps.fmt-check.outputs.failure-reason == 'check-failed' }}
      run: echo "formatting check failed"
    
    # Validate the terraform code
    - name: terraform validate
      uses: dflook/terraform-validate@v2
      id: validate
      with:
        workspace: ${{ env.TF_WORKSPACE }}

    - name: Validate failed
      if: ${{ failure() && steps.validate.outputs.failure-reason == 'validate-failed' }}
      run: echo "terraform validate failed"
    
    # Generates an execution plan for Terraform
    - name: terraform plan
      uses: dflook/terraform-plan@v2
      with:
        label: ${{ env.ENVIRONMENT }}
        workspace: ${{ env.TF_WORKSPACE }}
        var_file: ${{ env.ENVIRONMENT }}.tfvars

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/${{ env.ENVIRONMENT }}' && github.event_name == 'push'
      uses: dflook/terraform-apply@v2
      with:
        label: ${{ env.ENVIRONMENT }}
        workspace: ${{ env.TF_WORKSPACE }}
        var_file: ${{ env.ENVIRONMENT }}.tfvars

    - name: Get outputs
      uses: dflook/terraform-output@v2
      id: tf-outputs
      with:
        workspace: ${{ env.TF_WORKSPACE }}

    # Sync Web Files to S3, on push to main
    - name: Sync Web Files to S3
      if: github.ref == 'refs/heads/${{ env.ENVIRONMENT }}' && github.event_name == 'push'
      run: aws s3 sync web/ s3://${{ steps.tf-outputs.outputs.s3_bucket_name }}

    # Invalidate CloudFront Cache, on push to main
    - name: Invalidate CloudFront Cache
      if: github.ref == 'refs/heads/${{ env.ENVIRONMENT }}' && github.event_name == 'push'
      run: aws cloudfront create-invalidation --distribution-id ${{ steps.tf-outputs.outputs.cloudfront_dist }} --paths '/*'
