name: 'Terraform - PRODUCTION - Checks'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - production
    - main

permissions:
  pull-requests: write
  
jobs:
  prod-checks:
    name: 'Terraform - PRODUCTION - Checks'
    runs-on: arc-runner-set-tfm-s3-website
    env: 
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      ENVIRONMENT: production
      TF_WORKSPACE: production
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    # Make sure node20 is ready - ref https://github.com/hashicorp/setup-terraform/issues/84
    - name: Setup Node20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
    
    # Post PR comment with format results.
    - name: Post Format
      if: always() && github.ref != 'refs/heads/${{ env.ENVIRONMENT }}' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: fmt
        commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
        commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init
    
    # Post PR comment with init results.
    - name: Post Init
      if: always() && github.ref != 'refs/heads/${{ env.ENVIRONMENT }}' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}
    
    # Validate the terraform code
    - name: Terraform Validate
      id: validate
      run: terraform validate
    
    # Post PR comment with validate results.
    - name: Post Validate
      if: always() && github.ref != 'refs/heads/${{ env.ENVIRONMENT }}' && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: validate
        commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
        commenter_exitcode: ${{ steps.validate.outputs.exitcode }}
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -var-file ${{ env.ENVIRONMENT }}.tfvars
    
    # Post PR comment with plan results.
    - name: Post Plan
      if: always() && github.ref != 'refs/heads/${{ env.ENVIRONMENT }}' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
